input {
	file {		
		#Read one Trace file MM
		#path => "C:/BASE8/MM.p8k/Trace/2021-01-25/NDC.SystemManager_00001.txt"
		
		#Read one "Date" directory MM
		#path => "C:/BASE8/MM.p8k/Trace/2020-12-15/*.txt"
		
		#Read trace tree MM
		path => "C:/BASE8/MM.p8k/Trace/**/*.txt"
		sincedb_path => "nul"
		start_position => "beginning"
		max_open_files => 150 #max value 16384
		ignore_older => 3600 #ignore traces older than 60minutes
		exclude => "./NDC.SystemManager.Administrator_00001.txt" #ignore Admin file create when SM starts - not tested properly yet
		close_older => 1
		
		
	}
}

filter {		
	mutate {		
		add_field => {
			"Date" => {}
			"Time" => {}
		}
	}
	
	if "MSG     _1" in [message] {
		dissect {
			#Create field names and date
			mapping => {
				"message" => "%{timestamp}: %{index} %{trace_index} %{Message}     %{+Message} %{Res} %{AGV ID} %{Status} %{+Status} %{Segment} %{+Segment} %{Dsg} %{+Dsg} %{VBits} %{+VBits} %{Syss} %{+Syss} %{Angle} %{+Angle} %{X} %{+X} %{+X} %{+X} %{+Y} %{+Y} %{+Y} %{+Y}"
				"path" => "%{}/%{}/%{}/%{}/%{Date}/%{}"
			}
		}
		
		mutate {
			#Remove not so important fields
			remove_field => [
				"@timestamp", "@version", "host", "index", "trace_index", "Res", "Dsg", "Syss", "VBits",
				"timestamp", "Date", "Message"
			]
			
			#Add field for correct timestamp
			add_field => {
				"Time" => "%{Date} %{timestamp}" }
			
			#Get rid of spaces in important fields
			gsub => [
				"X", "[ \r]", "",
				"Y", "[ ]", "",
				"Angle", "[ ]", "",
				"Status", "[ ]", "",
				"Segment", "[ ]", "",
				"timestamp", "...$", ""
			]
		}
		
		#Convert to correct timestamp structure
		date {
			match => ["Time", "yyyy-MM-dd HH:mm:ss.SSS"]
			#timezone => "UTC"
			target => "@timestamp"
		}
		
		#Convert important fields to Integer
		ruby {
			code => 'event.set("AGV ID", event.get("AGV ID").to_s.to_i)
					event.set("X", event.get("X").to_s.hex)
					event.set("Y", event.get("Y").to_s.hex)
					event.set("Angle", event.get("Angle").to_s.hex / 100)
					#event.set("Status", event.get("Status").to_s.hex)
					event.set("Segment", event.get("Segment").to_s.hex)'
					#event.set('timestamp', event.get('timestamp')[1..-1])'
		}
	
	} else {
		drop {}
	}
	
	#	remove_field => ["message"]
	#	
	#	convert_datatype => {
	#		"timestamp" => "float"
	#	}
	#tag_on_failure => [ ]
	#}
	
	#date {
	#	match => [ "timestamp", "UNIX" ]
	#}
}

output {
	#How to print text on stdout
	#if "MSG     _1" in [message] {
	#	stdout {codec => line {format => "Mortii Tei"} }
	#}
	
	elasticsearch {
		hosts => ["localhost:9200"]
		index => "indexforlogstash"
	}
	
	stdout {
		codec => rubydebug
	}
	
	#TCP/IP socket
	tcp {
      port => 8900
      # The agent will connect to Logstash
      mode => "server"
      # Needs to be '0.0.0.0' if running in a container.
      host => "127.0.0.1"
    }
}